(when (not (boundp '*room73b2*))
  (require "models/room73b2-scene.l")
  (setq *room73b2* (room73b2)))

(when (not (boundp '*nao*))
  (require "package://naoeus/nao.l")
  (setq *nao* (NaoH25V50)))

(when (not (boundp '*fetch*))
  (load "package://fetcheus/fetch.l")
  (load "package://fetcheus/fetch-interface.l")
  ;;(setq *fetch* (fetch))
  (fetch-init)
  )

(when (not (boundp '*pr2*))
  (require "package://pr2eus/pr2.l")
  (setq *pr2* (pr2)))

(objects (list *room73b2* *nao* *fetch* *pr2*))

(defun wait-for-human ()
  ;;(send *pr2* :move-to (make-coords :pos #f(5000 0 0) :rpy (float-vector pi 0 0)) :world)
  (send *fetch* :move-to (make-coords :pos #f(5000 0 0) :rpy (float-vector pi 0 0)) :world)
  
  (send *irtviewer* :draw-objects)
  )

(defun write()
  (send *fetch* :move-to (make-coords :pos #f(5000 0 0) :rpy (float-vector pi 0 0)) :world)
  (send *fetch* :reset-pose)
  (send *ri* :angle-vector (send *fetch* :angle-vector) 2000)
  (send *ri* :wait-interpolation)
  (send *fetch* :rarm :move-end-pos #f(0 -400 250) :local :rotation-axis t :debug-view t)
  (send *ri* :angle-vector (send *fetch* :angle-vector) 2000)
  (send *ri* :wait-interpolation)
  (send *fetch* :rarm :move-end-rot -90 :z :local :debug-view t)
  (send *ri* :angle-vector (send *fetch* :angle-vector) 2000)
  (send *ri* :wait-interpolation)
  (send *fetch* :rarm :move-end-rot -90 :x :local :debug-view t)
  (send *ri* :angle-vector (send *fetch* :angle-vector) 2000)
  (send *ri* :wait-interpolation)
  (send *fetch* :rarm :move-end-pos #f(300 0 0) :local :rotation-axis t :debug-view t)
  (send *ri* :angle-vector (send *fetch* :angle-vector) 2000)
  (send *ri* :wait-interpolation)
  (send *irtviewer* :draw-objects)
  )
(defun write-dash()
  (send *fetch* :move-to (make-coords :pos #f(5000 0 0) :rpy (float-vector pi 0 0)) :world)
  (send *fetch* :reset-pose)
  (send *ri* :angle-vector (send *fetch* :angle-vector) 2000)
  (send *ri* :wait-interpolation)
  (send *fetch* :rarm :move-end-pos #f(0 -400 250) :local :rotation-axis t :debug-view t)
  (send *ri* :angle-vector (send *fetch* :angle-vector) 2000)
  (send *ri* :wait-interpolation)
  (send *fetch* :rarm :move-end-rot -90 :z :local :debug-view t)
  (send *ri* :angle-vector (send *fetch* :angle-vector) 2000)
  (send *ri* :wait-interpolation)
  (send *fetch* :rarm :move-end-rot -90 :x :local :debug-view t)
  (send *ri* :angle-vector (send *fetch* :angle-vector) 2000)
  (send *ri* :wait-interpolation)
  (send *fetch* :rarm :move-end-pos #f(100 0 0) :local :rotation-axis t :debug-view t)
  (send *ri* :angle-vector (send *fetch* :angle-vector) 2000)
  (send *ri* :wait-interpolation)
  (send *irtviewer* :draw-objects)
  )

;; (send *fetch* :rarm :move-end-pos #f(50 0 50) :local :rotation-axis t :debug-view t)
;; (send *ri* :angle-vector (send *fetch* :angle-vector) 2000)

(defun world-write-x-y (x y &key (debug-view t)) ;; 
  ;;(send *fetch* :rarm :move-end-pos (float-vector x y z) :local :rotation-axis t :debug-view debug-view)
  (;;let ((base-pos (float-vector 750 0 850)))
   let (base-pos :worldcoords ())
    ;;(send *fetch* :reset-pose)
    (send *fetch* :rarm :inverse-kinematics
	  (send (make-cascoords :pos (v+ base-pos (float-vector x y z))) :transform *fetch* :parent)
	  :rotation-axis t
	  :look-at-target t
	  :use-torso nil
	  :debug-view debug-view)
    (send *ri* :angle-vector (send *fetch* :angle-vector) 2000)
    (send *ri* :wait-interpolation)
    (send *irtviewer* :draw-objects)))

(defun move-x-y-z (x y &key (debug-view t))
  (send *fetch* :rarm :move-end-pos #f(0 0 5) :local :rotation-axis t :debug-view t)
  (send *ri* :angle-vector (send *fetch* :angle-vector) 2000)
  (send *ri* :wait-interpolation)
  (send *fetch* :rarm :move-end-pos (float-vector x y 0) :local :rotation-axis t :debug-view t)
  (send *ri* :angle-vector (send *fetch* :angle-vector) 2000)
  (send *ri* :wait-interpolation)
  (send *fetch* :rarm :move-end-pos #f(0 0 -5) :local :rotation-axis t :debug-view t)
  (send *ri* :angle-vector (send *fetch* :angle-vector) 2000)
  (send *ri* :wait-interpolation)
  )

;;(defun write-circle (d)
  ;;(setq current-pose (send *fetch* :rarm :end-coords :worldpos))
  ;;(dotimes (x 10)
    ;;(setq next-pose (v+ current-pose (float-vector (* d (cos (- (/ pi 2) (* (/ pi 10) x)))) (* d (sin (- (/ pi 2) (* (/ pi 10) x)))) 0)))
    ;;(send *fetch* :rarm :move-end-pos next-pose :local :rotation-axis t :debug-view t)
    ;;(send *ri* :angle-vector (send *fetch* :angle-vector) 2000)
    ;;(send *ri* :wait-interpolation)
    ;;(send *irtviewer* :draw-objects)
  ;))

(defun write-circle-left (d)
  (let ((x-max 10) avs)
  (move-x-y d 0)
  (dotimes (x x-max)
    (format t "~A times iteration~%" x)
    (send *ri* :wait-interpolation)
    (setq theta (* (/ pi x-max) x))
    (setq theta-dash (* (/ pi x-max) (+ x 1)))
    (setq vec
	  (float-vector (- (* d (cos theta-dash))
			   (* d (cos theta)))
			(- (* d (sin theta-dash))
			   (* d (sin theta)))
			0))
    (send *fetch* :rarm :move-end-pos vec :local :rotation-axis t :debug-view nil)
    ;;(send *fetch* :torso :joint-angle)
    ;;(print (send *fetch* :torso :waist-z :joint-angle))

    ;;(send *ri* :angle-vector (send *fetch* :angle-vector) 10 :head-controller)
    ;;(send *ri* :angle-vector (send *fetch* :angle-vector) 10 :arm-controller)
    ;;(send *ri* :wait-interpolation)
    (push (send *fetch* :angle-vector) avs)
    (send *irtviewer* :draw-objects)
    )
  (setq avs (reverse avs))
  (send *ri* :angle-vector-sequence avs (make-list x-max :initial-element 100))
  (print "wait for interpolation....")
  (send *ri* :wait-interpolation)
  ))

(defun write-circle-right (d)
  (let ((x-max 10) avs)
  (move-x-y d 0)
  (dotimes (x x-max)
    (format t "~A times iteration~%" x)
    (send *ri* :wait-interpolation)
    (setq theta (* (/ pi x-max) x))
    (setq theta-dash (* (/ pi x-max) (+ x 1)))
    (setq vec
	  (float-vector (- (* d (cos theta-dash))
			   (* d (cos theta)))
			(- (* d (sin theta))
			   (* d (sin theta-dash)))
			0))
    (send *fetch* :rarm :move-end-pos vec :local :rotation-axis t :debug-view nil)
    ;;(send *fetch* :torso :joint-angle)
    ;;(print (send *fetch* :torso :waist-z :joint-angle))

    ;;(send *ri* :angle-vector (send *fetch* :angle-vector) 10 :head-controller)
    ;;(send *ri* :angle-vector (send *fetch* :angle-vector) 10 :arm-controller)
    ;;(send *ri* :wait-interpolation)
    (push (send *fetch* :angle-vector) avs)
    (send *irtviewer* :draw-objects)
    )
  (setq avs (reverse avs))
  (send *ri* :angle-vector-sequence avs (make-list x-max :initial-element 100))
  (print "wait for interpolation....")
  (send *ri* :wait-interpolation)
  ))
(defun write-circle-down (d)
  (let ((x-max 10) avs)
  (move-x-y 0 (* -1 d))
  (dotimes (x x-max)
    (format t "~A times iteration~%" x)
    (send *ri* :wait-interpolation)
    (setq theta (* (/ pi x-max) x))
    (setq theta-dash (* (/ pi x-max) (+ x 1)))
    (setq vec
	  (float-vector (- (* d (sin theta))
			   (* d (sin theta-dash)))
			(- (* d (cos theta))
			   (* d (cos theta-dash)))
			0))
    (send *fetch* :rarm :move-end-pos vec :local :rotation-axis t :debug-view nil)
    ;;(send *fetch* :torso :joint-angle)
    ;;(print (send *fetch* :torso :waist-z :joint-angle))

    ;;(send *ri* :angle-vector (send *fetch* :angle-vector) 10 :head-controller)
    ;;(send *ri* :angle-vector (send *fetch* :angle-vector) 10 :arm-controller)
    ;;(send *ri* :wait-interpolation)
    (push (send *fetch* :angle-vector) avs)
    (send *irtviewer* :draw-objects)
    )
  (setq avs (reverse avs))
  (send *ri* :angle-vector-sequence avs (make-list x-max :initial-element 100))
  (print "wait for interpolation....")
  (send *ri* :wait-interpolation)
  ))

;;(defun write_I()
  ;;(send *fetch* :rarm :move-end-pos #f(0 0 50) :local :rotation-axis t :debug-view t)
  ;;(send *fetch* :rarm :move-end-pos #f(50 50 0) :local :rotation-axis t :debug-view t)
  ;;(send *fetch* :rarm :move-end-pos #f(0 0 -50) :local :rotation-axis t :debug-view t)
  ;;(send *fetch* :rarm :move-end-pos #f(50 0 0) :local :rotation-axis t :debug-view t)
  ;;(write-x-y-z 50 0 -50)op
  ;;(write-x-y-z -50 0 0)
  ;;(write-x-y-z 0 50 0)
  ;;(write-x-y-z 0 -50 50)
  ;;)

(defun write-line (command-list) ;; defun write_line (command_list):
  (ros::ros-warn "command-list ~A" command-list)
  (when (car command-list) ;; car x == x[0]
    (send *fetch* :rarm :move-end-pos (float-vector (elt (car command-list) 0)
						    (elt (car command-list) 1)
						    50)
	  :local :rotation-axis t :debug-view nil)
    (send *ri* :angle-vector (send *fetch* :angle-vector) 2000)
    (send *ri* :wait-interpolation))
  (dolist (command command-list) ;;   for command in command_list: ;; for i in [1,2,3]:
    (ros::ros-warn "    command ~A" command)
    (write-x-y-z
     (elt command 0) ;; command[0]
     (elt command 1) ;; command[1]
     0
     :debug-view nil
     )
    );; dolist
  (send *fetch* :rarm :move-end-pos #f(0 0 50) :local :rotation-axis t :debug-view nil)
  (send *ri* :angle-vector (send *fetch* :angle-vector) 2000)
  (send *ri* :wait-interpolation)
  ) ;; defun


;;(defun write-I ()
  ;;(write-line (list  (list 0 50)))
  ;;(write-x-y-z 0 -25 0 :debug-view nil)
 ;; (write-line (list  (list -50 0)))
  ;;(write-x-y-z 0 25 0 :debug-view nil)
  ;;(write-line (list  (list 0 50)))
  ;;)


(defun move-x-y (x y) ;;
  (let (av0 av1 av2)
  ;;(send *fetch* :rarm :move-end-pos (float-vector x y z) :local :rotation-axis t :debug-view debug-view)
  ;;(let ((base-pos (float-vector 750 0 850)))
    ;;(send *fetch* :reset-pose)
    (send *fetch* :rarm :move-end-pos #f(0 0 50) :local :rotation-axis t :debug-view nil)
    ;;(send *ri* :angle-vector (send *fetch* :angle-vector) 2000)
    (setq av0 (send *fetch* :angle-vector))
    ;;(print (send *fetch* :torso :waist-z :joint-angle))
    ;;(send *ri* :wait-interpolation)
    (send *irtviewer* :draw-objects)
    (send *fetch* :rarm :move-end-pos (float-vector x y 0) :local :rotation-axis t :debug-view nil)
    (setq av1 (send *fetch* :angle-vector))
    ;;(send *ri* :angle-vector (send *fetch* :angle-vector) 2000)
    ;;(print (send *fetch* :torso :waist-z :joint-angle))
    ;;(send *ri* :wait-interpolation)
    (send *irtviewer* :draw-objects)
    (send *fetch* :rarm :move-end-pos #f(0 0 -50) :local :rotation-axis t :debug-view nil)
    (setq av2 (send *fetch* :angle-vector))
    ;;(send *ri* :angle-vector (send *fetch* :angle-vector) 2000)
    ;;(print (send *fetch* :torso :waist-z :joint-angle))
    (send *ri* :angle-vector-sequence-raw (list av0 av1 av2) (list 2000 2000 2000))
    (send *ri* :wait-interpolation)
    (send *irtviewer* :draw-objects)
    ))

(defun line-x-y (x y)
   (send *fetch* :rarm :move-end-pos (float-vector x y 0) :local :rotation-axis t :debug-view nil)
    (send *ri* :angle-vector (send *fetch* :angle-vector) 2000)
    (send *ri* :wait-interpolation)
    (send *irtviewer* :draw-objects)
    )

(defun local-write-x-y (x y)
  (send *fetch* :rarm :move-end-pos (float-vector x y 0) :local :rotation-axis t :debug-view nil)
  (send *ri* :angle-vector (send *fetch* :angle-vector) 2000)
  (send *ri* :wait-interpolation)
  )
(defun move-back()
  (send *ri* :go-pos-unsafe -0.1 0 0)
  (send *irtviewer* :draw-objects)
  )

(defun move-right (x y)
  (arm-up)
  (send *fetch* :rarm :move-end-pos (float-vector x y 0) :local :rotation-axis t :debug-view nil)
  (send *ri* :angle-vector (send *fetch* :angle-vector) 2000)
  (send *ri* :wait-interpolation)
  (arm-down)
  )
(defun local-write-x-y-new (x y)
  (let ((devide 100) angle-vector-list)
  (dotimes (i devide)
    (send *fetch* :rarm :move-end-pos
          (float-vector (/ x (float devide))
                        (/ y (float devide))
                        0)
          :local :rotation-axis t :debug-view nil)
    (setq angle-vector-list (append angle-vector-list (list (send *fetch* :angle-vector)))))
  (send *ri* :angle-vector-sequence-raw angle-vector-list 2000)
  (send *ri* :wait-interpolation)
  ))
(defun arm-up()
  (send *fetch* :rarm :move-end-pos #f(0 0 50) :local :rotation-axis t :debug-view nil)
  (send *ri* :angle-vector (send *fetch* :angle-vector) 2000)
  (send *ri* :wait-interpolation)
  (send *irtviewer* :draw-objects)
  )
(defun arm-down()
  (send *fetch* :rarm :move-end-pos #f(0 0 -50) :local :rotation-axis t :debug-view nil)
  (send *ri* :angle-vector (send *fetch* :angle-vector) 2000)
  (send *ri* :wait-interpolation)
  (send *irtviewer* :draw-objects)
  )
(defun write_A()
  (local-write-x-y -30 15)
  (move-x-y 30 -15)
  (local-write-x-y -30 -15)
  (move-x-y 15 25)
  (local-write-x-y 0 -20)
  )
(defun write_B()
  (local-write-x-y -40 0)
  (move-x-y 40 0)
  (local-write-x-y 0 -10)
  (move-x-y -10 0)
  (write-circle-right 10)
  (move-x-y -10 0)
  (write-circle-right 10)
  )

(defun write_C()
  (write-circle-left 30)
  )
(defun write_D()
  (local-write-x-y -40 0)
  (move-x-y 20 0)
  (write-circle-right 20)
  )
(defun write_E()
  (local-write-x-y -30 0)
  (move-x-y 30 0)
  (local-write-x-y 0 -20)
  (move-x-y -15 20)
  (local-write-x-y 0 -20)
  (move-x-y -15 20)
  (local-write-x-y 0 -20)
  )
(defun write_F()
  (local-write-x-y -30 0)
  (move-x-y 30 0)
  (local-write-x-y 0 -15)
  (move-x-y -10 15)
  (local-write-x-y 0 -15)
  )
(defun write_G ()
  (write-circle-left 30)
  (local-write-x-y 10 0)
  )
(defun write_H()
  (local-write-x-y -30 0)
  (move-x-y 15 0)
  (local-write-x-y 0 -20)
  (move-x-y 15 0)
  (local-write-x-y -30 0)
  )
(defun write_I()
  (local-write-x-y 0 -10)
  (move-x-y 0 5)
  (local-write-x-y -30 0)
  (move-x-y 5 0)
  (local-write-x-y 0 -10)
  )
(defun write_J()
  (local-write-x-y 0 -20)
  (move-x-y 0 10)
  (local-write-x-y -10 0)
  (move-x-y 0 15)
  (write-circle-down 30)
  )
(defun write_K()
  (local-write-x-y -30 0)
  (move-x-y 30 -20)
  (local-write-x-y -15 20)
  (local-write-x-y -15 -20)
  )
(defun write_L()
  (local-write-x-y -30 0)
  (local-write-x-y 0 -20)
  )
(defun write_M()
  (move-x-y -30 0)
  (local-write-x-y 30 0)
  (local-write-x-y -10 -10)
  (local-write-x-y 10 -10)
  (local-write-x-y -30 0)
  )
(defun write_N()
  (move-x-y -30 0)
  (local-write-x-y 30 0)
  (local-write-x-y -30 -20)
  (local-write-x-y 30 0)
  )
(defun write_O()
  (write-circle-right 40)
  (move-x-y 40 0)
  (write-circle-left 40)
  )
(defun write_P()
  (local-write-x-y -30 0)
  (move-x-y 20 0)
  (write-circle-right 10)
  )
(defun write_Q()
  (write-circle-right 25)
  (move-x-y 25 0)
  (write-circle-left 25)
  (local-write-x-y -10 -10)
  )
(defun write_R()
  (local-write-x-y -30 0)
  (move-x-y 20 0)
  (write-circle-right 10)
  (local-write-x-y -15 -15)
  )
(defun write_S()
  (write-circle-left 30)
  (move-x-y -15 0)
  (write-circle-right 30)
  )
(defun write_T()
  (local-write-x-y 0 -20)
  (move-x-y 0 10)
  (local-write-x-y -30 0)
  )
(defun write_U()
  (move-x-y 0 -30)
  (local-write-x-y -20 0)
  (move-x-y 30 0)
  (write-circle-down 30)
  (local-write-x-y 20 0)
  )  
(defun write_V()
  (local-write-x-y -30 -15)
  (local-write-x-y 30 -15)
  )
(defun write_W()
  (local-write-x-y -30 -10)
  (local-write-x-y 30 -10)
  (local-write-x-y -30 -10)
  (local-write-x-y 30 -10)
  )
(defun write_X()
  (local-write-x-y -30 -30)
  (move-x-y 30 0)
  (local-write-x-y -30 30)
  )
(defun write_Y()
  (local-write-x-y -10 -10)
  (local-write-x-y 10 -10)
  (move-x-y -10 10)
  (local-write-x-y -20 0)
  )
(defun write_Z()
  (local-write-x-y 0 -20)
  (local-write-x-y -30 20)
  (local-write-x-y 0 -20)
  )
(defun write-niko()
  (write_O)
  (move-x-y 40 50)
  (local-write-x-y -10 -10)
  (local-write-x-y -10 10)
  (move-x-y 20 -30)
  (local-write-x-y -10 10)
  (local-write-x-y -10 -10)
  (move-x-y -10 20)
  (local-write-x-y 0 -20)
  (move-x-y 0 10)
  (write-circle-down 10)
  )
(defun write-HNY()
  (write_H)
  (move-right 30 -20)
  (write_A)
  (move-right 10 -20)
  (write_P)
  (move-right 15 -20)
  (write_P)
  (move-right 15 -20)
  (write_Y)
  (arm-up)
  (move-back)
  (move-right -30 100)
  (write_N)
  (move-right 0 -20)
  (write_E)
  (move-right 30 -20)
  (write_W)
  (arm-up)
  (move-back)
  (move-right -50 60)
  (write_Y)
  (move-right 30 -20)
  (write_E)
  (move-right 30 -20)
  (write_A)
  (move-right 10 -20)
  (wirte_R)
  (arm-up)
  (move-back)
  (write-niko)
  )
  
